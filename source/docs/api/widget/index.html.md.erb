---
title: Tito Widget V2 Docs

language_tabs: # must be one of https://git.io/vQNgJ
  - html

includes:

search: false
---

# Tito Widget V2

The Tito widget V2 has the following goals in mind:

- Extremely simple to use. One JavaScript include, one `<tito-widget>` element
- Straightforward defaults, easily configurable
- Easy to integrate with other tools
- Use latest payment provider APIs
- Fast and efficient. Should only load event details once, even for multiple elements

## Basic usage

Tito widget basic usage is identical to v1:

```html
<!-- place this in your head tag -->
<script src='https://js.tito.io/v2' async></script>

<!-- Place this where you want the widget to appear -->
<tito-widget event="ultimateconf/2013"></tito-widget>
```

<script>window.tito = window.tito || function() { (tito.q = tito.q || []).push(arguments);};</script>
<script src='https://js.staging.tito.io/v2' async></script>

<!-- Place this where you want the widget to appear -->
<tito-widget event="ultimateconf/2013"></tito-widget>

## Form Styles

```html
<script src='https://js.tito.io/v2/without/widget-css' async></script>
```

Form styles are loaded automatically. If you wish to load the widget unstyled, you can add `without/widget-css` in the `src` attribute.

## Buttons

```html
<tito-button event="ultimateconf/2013"></tito-button>
```

If you just want a button, you can use `tito-button`. The button renders a `button` element with the `tito-widget-button` class. You can style this however you wish using CSS.

<tito-button event="ultimateconf/2013"></tito-button>

You can set the button label as you would ordinary html:

```html
<tito-button event="ultimateconf/2013">My custom label</tito-button>
```

<tito-button event="ultimateconf/2013">My custom label</tito-button>

## Showing Specific tickets

You can pass a specific ticket or set of tickets to a widget, with the releases attribute:

### A single ticket

```html
<tito-button event="ultimateconf/2013" releases="3elajg6qcxu"></tito-button>
```

<tito-button event="ultimateconf/2013" releases="3elajg6qcxu">I only show one ticket</tito-button>

### Multiple tickets

Show multiple tickets with a comma separated list:

```html
<tito-button event="ultimateconf/2013" releases="3elajg6qcxu,6qiiw4socs4"></tito-button>
```

<tito-button event="ultimateconf/2013" releases="3elajg6qcxu,6qiiw4socs4">I only show two tickets</tito-button>

### Widget

This works for the widget too:

```html
<tito-widget event="ultimateconf/2013" releases="3elajg6qcxu"></tito-widget>
```

<tito-widget event="ultimateconf/2013" releases="3elajg6qcxu"></tito-widget>

### Secret tickets

If you reference a secret ticket in the list of releases to show then it will be shown (the release is shown regardless of its secret status).

## Passing in a discount code

```html
<tito-button event="ultimateconf/2013" discount-code="half-off"></tito-button>
```

<tito-button event="ultimateconf/2013" discount-code="half-off">I apply a discount code</tito-button>

This works for the widget too:

```html
<tito-widget event="ultimateconf/2013" discount-code="half-off"></tito-widget>
```

<tito-widget event="ultimateconf/2013" discount-code="half-off">I apply a discount code</tito-widget>


## JavaScript API

### Async

The widget loading code expects to be loaded async, so when using the API, you should not expect that the `tito` function will be defined when you call it. Like other embedded JavaScript widget APIs, the `tito` function simply adds actions to a queue and processes them later.

```html
<script>
window.tito = window.tito || function() { (tito.q = tito.q || []).push(arguments);};
</script>
```

You should define `tito` before you make any calls.

### Mounting a widget

You can use the JavaScript API to load a widget on-demand without using the `tito-widget` or `tito-button` custom elements.

```html
<script>
  tito("widget.mount", {el: "#tito-widget", event: "ultimateconf/2013"})
</script>

<div id="tito-widget"></div>
```
<script>
  tito("widget.mount", {el: "#tito-widget", event: "ultimateconf/2013"})
</script>

<div><div id="tito-widget"></div></div>

### Mounting a button

```html
<script>
  tito("button.mount", {el: "#tito-button", event: "ultimateconf/2013"})
</script>

<div id="tito-button"></div>
```
<script>
  tito("button.mount", {el: "#tito-button", event: "ultimateconf/2013"})
</script>

<div><div id="tito-button"></div></div>

## Callbacks

After you include the Tito JavaScript, you can create listeners to various events in the lifecycle of an order as it happens via the widget. Various data is also passed along with these lifecycle events.

The syntax for listening for these events is very simple:

```html
<script>
  tito('on:registration:started', function(data){
    // code here will be fired when the purchase form loads
  })

  tito('on:registration:finished', function(data){
    // code here will be fired when payment / registration is complete
  })
</script>
```

### registration:started

```json
// registration:started data
{
  "slug": "xyzdef123456",
  "line_items": [{
    "release_slug": "1234abcd",
    "price":        "4.00",
    "title":        "Regular",
    "quantity":     1,
    "total":        "4.00",
    "currency":     "USD"
  }]
}

```

This happens when the purchase/registration form is displayed. It comes with a data object that contains the unique slug of the order, along with an object containing info about the tickets that the customer chose. eg.

### registration:finished

```json
// registration:finished data
{
  "name":             "Joe Joe",
  "email":            "joe@joe.joe",
  "total":            "4.00",
  "currency":         "USD",
  "slug":             "1234defg",
  "reference":        "ABCD",
  "line_items":       [{
    "release_slug": "1234abcd",
    "price":        "4.00",
    "title":        "Regular",
    "quantity":     1,
    "total":        "4.00",
    "currency":     "USD"
  }],
  "tickets":          [{
    "reference":     "ABCD-1",
    "slug":          "1234abcd",
    "price":         "4.00",
    "release_slug":  "1234abcd",
    "release_title": "Regular",
    "name":          "Joe joe",
    "email":         "joe@joe.joe",
    "answers": {
      "question_id":        123,
      "question":           "What is the flight speed of an unladen sparrow?",
      "humanized_response": "1, 2 and 3",
      "response":           [1,2,3]
    }
  }],
  "receipt_url":      "http://ti.to/receipts/12345abcdef",
  "registration_url": "http://ti.to/registrations/12345abcdef",
  "receipt":          {
    "total":            "4.00",
    "tax":              "0.00",
    "payment_provider": "Stripe"
  },
  "discount_code":    ""
}
```

This happens when the order is finished but not necessarily complete. It might not be complete if tickets have required questions that have yet to be filled in. It comes with full data about the order.

### Plugins

```html
<script src='https://js.tito.io/v2/with/gtm' async></script>
```

Various plugins are available that have pre-defined integrations with third-party tools. To load plugins, you can append `with/<pluginname>` to the end of the `src` attribute of the `script` tag.

#### Google Tag Manager

The `gtm` plugin sends data to a `dataLayer` for use with Google Tag Manager. To use this plugin, the following must be set up:

1. Google Tag Manager should already be loaded on the page you're embedding the widget
2. Enhanced eCommerce must be set up on your tag
3. You can track the folowing events:
  - tito:checkout
  - tito:purchase

#### Facebook

The `facebook` plugin sends data via Facebook's `fbq` function. Make sure that you have loaded the facebook `script` to use this plugin.

### Test Mode

```html
<script src='https://js.tito.io/v2?key=xyz' async></script>
```

You can load the widget in test mode by using a test mode publishable key.

To get a test mode public key:

1. Go to id.tito.io
2. Click on "API Access"
3. Click on "Generate New Token"
4. Choose "Test" and "Publishable Key" and click "Create"

Now you can add `key=` to your `script` `src` attributes and all requests and purchases will be in test mode.