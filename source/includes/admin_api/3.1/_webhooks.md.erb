# Webhooks

Webhooks allow data to be passed to an external system in real time. Webhooks
will `POST` a `JSON` payload to the endpoint you specify, with a `X-Webhook-Name`
header.

<%= read_more "2011381-webhooks", "webhooks" %>

## Triggers

Name              | Description
----------------- | ---------------------------
<% data.webhooks.triggers.each do |webhook| %>
`<%= webhook.name %>` | <%= webhook.description %>
<% end %>

## Payloads

<h3 style="clear:both;">Ticket Payload</h3>

<%= display_response :webhook_payload, resource: "tickets" %>

For webhooks that have the webhook type of `ticket.*` the following JSON payload
will be sent.

<h3 style="clear:both;">Registration Payload</h3>

<%= display_response :webhook_payload, resource: "registrations" %>

For webhooks that have the webhook type of `registration.*` the following JSON payload
will be sent.

<h3 style="clear:both;">Checkin Payload</h3>

<%= partial "includes/admin_api/3.0/webhooks/checkin.json" %>

For webhooks that have the webhook type of `checkin.*` the following JSON payload
will be sent.


## Verifying the payload

```ruby
key = 'YOUR EVENT SECURITY TOKEN'
hash = OpenSSL::Digest.new('sha256')
data = 'THE WEBHOOK REQUEST'

Base64.encode64(OpenSSL::HMAC.digest(hash, key, data)).strip
```

Each payload comes with a signed HMAC signature so that you can verify the origin of the webhook request.

In Customize / Webhooks, you’ll find a shared security token. This is used to sign the payload.

The security token is used as a key to sign the payload data with an HMAC key.

The HMAC key is your security token, the HMAC digest is SHA2, and the data is the raw payload JSON that is sent. The key is sent Base64 encoded via the Tito-Signature HTTP header.

If you’re using Ruby, for example, you can verify the authenticity of your payload with the code opposite.

## Developing Locally

When you are developing your application locally you'll need to expose your local development
environment to the Internet, so that Tito can send you webhooks and your application can
process them.


### Using Serveo

You can expose your local environment to the internet using [Serveo](https://serveo.net/)

To expose your local environment to the internet:

`ssh -R 80:localhost:4567 serveo.net` where `4567` is the port number your application
is running on.

You should see a line that looks something like this:

`Forwarding HTTP traffic from https://duncan.serveo.net`

Copy and paste that *.serveo.net URL into your browser. Notice you can now access
your application using that URL.

If your application listens for webhooks from Tito on `http://localhost:4567/webhooks/`
you can create a webhook endpoint within Tito with the url `https://duncan.serveo.net/webhooks/`.
